/**
*  testFTPClient.ds
*
*	@input testType : String
*   @input numCalls : String
*	@output svcConfig : dw.svc.Service
*   @output ftpResult : dw.svc.Result
*
*/
importPackage( dw.util );
importPackage( dw.svc );
importPackage( dw.net );
importPackage( dw.io );

function execute( args : PipelineDictionary ) : Number
{	
	
   var service:Service;
   var result:Result;
   var counter = args.numCalls;
   var mockCall = false;
   var pipelineError = false;
   
   var callTestFTP = LocalServiceRegistry.createService("test.ftp", {
		mockCall: function(svc:FTPService, params){
			return [
		    { "name": "testfile1", "timestamp": new Date(2011, 02, 21)},
            { "name": "testfile2", "timestamp": new Date(2012, 02, 21)},
            { "name": "testfile3", "timestamp": new Date(2013, 02, 21)}
            ];
		},
		createRequest: function(svc:FTPService, args){
			return svc;
		},
		parseResponse: function(svc:FTPService, result:Array) {
			var ret : Array = [];
			for(var i = 0; i < result.length; i++) {
				ret.push( result[i].name );
			}
			ret.sort();
			return ret;
		}
	});
    
   // Execute the request on the service configuration
   function makeCall(svcConfig:Service, params:Object) {
 
      if ( counter == null ){
     	counter = 1;
      }
   
      while ( counter != 0 ){
      	if ( mockCall ) {
     	  result = service.setMock().call(params);
      	} else if ( pipelineError ) {
      	  result = service.setThrowOnError().call(params);	
      	} else {
      	  result = service.call(params);
      	}
     	counter--;
      }
      
      // Set pdict out values
      args.svcConfig = service;
      args.ftpResult = result;
    }
	
	switch ( args.testType ) {   	
   	  case "LIST":
   	    service = callTestFTP;
        service.setOperation("list");
        break;
      case "CD":
   	    service = callTestFTP;
        service.setOperation("cd", "/");
        break;
      case "MKDIR":
   	    service = callTestFTP;
        service.setOperation("mkdir", "test");
        break;
      case "DELETE":
   	    service = callTestFTP;
        service.setOperation("del", "test");
        break;
	}
	
	makeCall(service);
	
	if ( result == null || service == null ){
   	  return PIPELET_ERROR;
    }
    
    return PIPELET_NEXT;  
}